#!/bin/bash
##
## Simple script to manage docker container lifecycle for local development.  
##
## Usage: ./myairflow [status|exec|init|test|update|build|start|stop|restart|remove|login|logs]
##

export BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]:-}" )" && pwd -P)"

export DOCKER="docker"
export AIRFLOW_DOCKER_DIR=$BASE_DIR/docker
export AIRFLOW_DOCKER_DATA=$BASE_DIR/data
export AIRFLOW_DOCKER_IMAGE="evoodas/airflow_testing:latest"

function container_id()     	{ echo $($DOCKER ps -a | grep "$AIRFLOW_DOCKER_IMAGE" | cut -d ' ' -f 1); }
function exit_not_found()   	{ echo "[FATAL] Unable to find a container '$AIRFLOW_DOCKER_IMAGE'."; }
function exit_already_running() { echo "[FATAL] Container is already running.."; docker ps -a | grep "$AIRFLOW_DOCKER_IMAGE"; }
function warn_not_found()   	{ echo "[WARN] Container not found: Is '$AIRFLOW_DOCKER_IMAGE' stopped or removed?"; }

function airflow_init() {
    echo "### Initialising local docker-airflow data directory.."
    echo "Creating data directory for downloads in '$AIRFLOW_DOCKER_DATA/download'.."
    mkdir -p $AIRFLOW_DOCKER_DATA/download
    chmod -R ugo+rwx $AIRFLOW_DOCKER_DATA
}

function airflow_build() {
    echo "### Building $AIRFLOW_DOCKER_IMAGE.."
    cd $AIRFLOW_DOCKER_DIR
    $DOCKER build --force-rm -t $AIRFLOW_DOCKER_IMAGE .
}

function airflow_start() {
    echo "### Starting $AIRFLOW_DOCKER_IMAGE.."
    if [ -z "$(container_id)" ]; then
    	cd $AIRFLOW_DOCKER_DIR && \
    	$DOCKER run \
        -v ${BASE_DIR}/../metadata-ingestion:/usr/local/evoodas/metadata-ingestion \
        -v ${BASE_DIR}:/usr/local/evoodas/airflow \
        -v ${AIRFLOW_DOCKER_DATA}:/var/data/ \
        -e LOAD_EX=n \
        -e VAULT_ADDR=$VAULT_ADDR \
        -e VAULT_TOKEN=$VAULT_TOKEN \
        -d -p 8080:8080 \
        $AIRFLOW_DOCKER_IMAGE
    else
    	exit_already_running
    fi
        
}

function airflow_stop() {
    echo "### Stopping $(container_id).." 
    if [ ! -z "$(container_id)" ]; then
        docker stop $(container_id)
        docker rm -f $(container_id) 
    else
        warn_not_found
    fi
}

function airflow_restart() {
    echo "### Restarting $(container_id).."
    [ ! -z "$(container_id)" ] && \
        docker restart $(container_id) || \
        exit_not_found
}

function airflow_status() {
    echo "### Status $(container_id).." 
    docker ps -a | grep $AIRFLOW_DOCKER_IMAGE
}

function airflow_login() {
    echo "### Login to $(container_id).."
    [ ! -z "$(container_id)" ] && \
        docker exec -it $(container_id) /bin/bash || \
        exit_not_found
}

function airflow_exec() {
    echo "### Executing '$*' in $AIRFLOW_DOCKER_IMAGE.."
	if [ ! -z "$(container_id)" ]; then
        docker exec $(container_id) $*
    else
        warn_not_found
    fi
}

function airflow_remove() {
    echo "### Removing $(container_id).."
    [ ! -z "$(container_id)" ] && \
        docker rm -f $(container_id) || \
        warn_not_found
}

function airflow_logs() {
    echo "### Logging $(container_id).."
    [ ! -z "$(container_id)" ] && \
        docker logs -f $(container_id) || \
        exit_not_found
}

function airflow_update() {
    echo "### Updating $(container_id).."
    [ ! -z "$(container_id)" ] && {
        airflow_stop
        airflow_remove    
    }

    airflow_build
    airflow_run
    sleep 3
    airflow_exec airflow scheduler;
    airflow_logs
}

function airflow_test() {
    echo "### Running Tests $(container_id).."
    if [ ! -z "$(container_id)" ]; then
        airflow_exec "env"
        airflow_exec airflow resetdb -y
        airflow_exec airflow test S2_MSI_L1C search_product_task 2017-01-01
        airflow_exec airflow test S2_MSI_L1C download_product_task 2017-01-01
        airflow_exec airflow test S2_MSI_L1C archive_product_task 2017-01-01
        airflow_exec airflow test S2_MSI_L1C extract_thumbnail_task 2017-01-01
        airflow_exec airflow test S2_MSI_L1C extract_metadata_task 2017-01-01
        airflow_exec airflow test S2_MSI_L1C archive_wldprj_task 2017-01-01
        airflow_exec airflow test S2_MSI_L1C create_product_zip_task 2017-01-01
        airflow_exec airflow test S2_MSI_L1C publish_product_task 2017-01-01
    else
    	exit_not_found
    fi
}

# if called with parameter check and try to execute
if [[ ${#} > 0 ]]; then

	if [ ! -d $AIRFLOW_DOCKER_DATA/download ]; then
		echo "Directory '$AIRFLOW_DOCKER_DATA/download' does not exist. Run './myairflow init' to create it."
		exit 1 
	fi

    case $1 in
        status)     airflow_status; ;;
        exec)       shift 1; airflow_exec $*; ;;
        init)       airflow_init; ;;
        test)       airflow_test; ;;
        update)     airflow_update; ;;
        build)      airflow_build; ;;
        start)      airflow_start; sleep 3 && airflow_exec airflow scheduler; airflow_logs; ;;
        stop)       airflow_stop; ;;
        restart)    airflow_restart; airflow_logs; ;;
        remove)     airflow_remove; ;;
        login)      airflow_login; ;;
        logs)       airflow_logs; ;;
        *)          echo "USAGE: $0 [status|exec|init|test|update|build|start|stop|restart|remove|login|logs]"; ;;
    esac

fi
